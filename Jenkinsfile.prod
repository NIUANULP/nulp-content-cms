pipeline {
    agent any

    environment {
        IMAGE_TAG   = "${env.BUILD_NUMBER}"
        PREV_BUILD  = "${env.BUILD_NUMBER.toInteger() - 1}"
        REGISTRY    = "docker.io"
    }

    stages {

        stage('Load Config from Credentials') {
            steps {
                withCredentials([
                    string(credentialsId: 'docker-strapi-image', variable: 'IMAGE_NAME'),
                    string(credentialsId: 'git-user', variable: 'GIT_USER')
                ]) {
                    script {
                        env.IMAGE_NAME = IMAGE_NAME
                        env.GIT_USER   = GIT_USER
                    }
                }
            }
        }

        stage('Cleanup Previous strapi Image') {
            steps {
                sh '''
                  echo "Attempting to remove previous image: ${IMAGE_NAME}:${PREV_BUILD} (if exists)..."
                  docker rmi ${IMAGE_NAME}:${PREV_BUILD} || true
                '''
            }
        }

        stage('Pre-Build Setup & Run Script') {
            steps {
                sh '''
                  # Install nvm if not already installed
                  if [ ! -d "$HOME/.nvm" ]; then
                    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
                  fi

                  # Load nvm
                  export NVM_DIR="$HOME/.nvm"
                  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

                  # Install and use Node.js 20.19.4
                  nvm install 20.19.4
                  nvm use 20.19.4

                  echo "Using Node.js version: $(node -v)"
                  echo "Using npm version: $(npm -v)"

                  # Run pre-build script
                  chmod +x ./script.sh
                  ./script.sh
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                  docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                """
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                      echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                      docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to AKS') {
            steps {
                sh """
                  # Replace image tag in deployment.yaml before applying
                  sed -i 's#niuasunbird/strapi:5.20v4#${IMAGE_NAME}:${IMAGE_TAG}#' k8s/deploy.yaml
                  export KUBECONFIG=/var/lib/jenkins/secrets/k8s.yaml
                  kubectl apply -f k8s/deploy-prod.yaml -n dev
                """
            }
        }
    }
}

